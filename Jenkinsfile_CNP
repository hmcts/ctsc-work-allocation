#!groovy

properties(
    [[$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/ctsc-work-allocation.git'],
     pipelineTriggers([[$class: 'GitHubPushTrigger']])]
)

@Library('Infrastructure')

def type = "java"

def product = "ctsc"

def app = "work-allocation"

def onMasterNotificationsChannel = '#ctsc-master-builds'
def onDemoNotificationsChannel = '#ctsc-demo-builds'
def onPRNotificationsChannel = '#ctsc-pr-builds'

def secrets = [
    's2s-${env}': [
        secret('microservicekey-ctsc-work-allocation', 'S2S_IDAM_SECRET')
    ]
]

def vaultOverrides = [
    'preview': 'aat',
    'spreview': 'saat',
    'hmctsdemo': 'aat'
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withPipeline(type, product, app) {
    onMaster {
      enableSlackNotifications(onMasterNotificationsChannel)
    }
    onDemo {
      enableSlackNotifications(onDemoNotificationsChannel)
    }
    onPR {
      enableSlackNotifications(onPRNotificationsChannel)
    }
    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)
    enableDbMigration('ctsc')
    enableSlackNotifications('#ctstc-tech-internal')
    disableLegacyDeployment()
    enableAksStagingDeployment()


    after('functionalTest:preview') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:aat') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }
}
