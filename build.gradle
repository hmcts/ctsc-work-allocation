plugins {
  id 'idea'
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.springframework.boot' version '2.2.8.RELEASE'
  id 'org.owasp.dependencycheck' version '5.3.2.1'
  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'org.sonarqube' version '2.8'
  id "io.freefair.lombok" version "5.1.0"
  id 'org.flywaydb.flyway' version '6.3.2'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: GradleBuild, description: 'Runs smoke tests', group: 'Verification') {
  buildFile = './build.gradle'
  tasks = ['smokeTest']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.18'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDir = new File(rootDir, 'config/checkstyle')
}

jacoco {
  toolVersion = "0.8.4"
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

def sonarExclusions = [
  '**/Application.java',
  '**/config/*.java',
  '**/CcdPollingController.java',
  '**/LastRunTimeService.java',
  '**/AuthController.java',
  '**/Authorize.java',
  '**/IdamService.java',
  '**/UserDetails.java',
  '**/Task.java',
  '**/EmailSendingService.java',
  '**/QueueClientSupplier.java',
  '**/*Exception.java',
  '**/TaskErrorHandler.java'
]

sonarqube {
  properties {
    property "sonar.projectKey", "CTSC-WORK-ALLOCATION"
    property "sonar.projectName", "CTSC-Work-Allocation-app"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.exclusions", sonarExclusions.join(", ")
    property "sonar.test.exclusions", sonarExclusions.join(", ")
    property "sonar.coverage.exclusions", sonarExclusions.join(", ")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.64'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '29.0-jre') {
      entry 'guava'
    }
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
}

def versions = [
  junit           : '5.5.0',
  reformLogging   : '5.0.1',
  springBoot      : springBoot.class.package.implementationVersion,
  springfoxSwagger: '2.9.2'
]

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
        details.useVersion '2.9.9'
      }

      if (details.requested.name == 'jackson-databind') {
        details.useVersion '2.9.9.1'
      }
    }
  }
}

def javaLoggingVersion = '5.0.1'

dependencies {
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: javaLoggingVersion
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: javaLoggingVersion
  compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.1'

  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  compile group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: '2.6.0'
  compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'
  compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.5'

  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformLogging
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.2.RELEASE'
  compile group: 'com.microsoft.azure', name: 'azure-servicebus', version: '3.2.0'
  compile group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback', version: '2.0.+'
  compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.5.RELEASE'

  compile group: 'org.postgresql', name: 'postgresql', version: '42.2.14'

  compile group: 'org.apache.velocity', name: 'velocity', version: '1.7'

  compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.10.3'
  compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.10.3'

  compile group: 'io.vavr', name: 'vavr', version: '0.10.3'
  compile group: 'org.flywaydb', name: 'flyway-core', version: '6.3.2'


  testCompile group: 'io.rest-assured', name: 'rest-assured', version: '4.1.2'
  testCompile group: 'io.rest-assured', name: 'json-path', version: '4.3.0'
  testCompile group: 'io.rest-assured', name: 'xml-path', version: '4.3.0'



  testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude(module: 'commons-logging')
  }

  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath

  // smoke
  smokeTestCompile sourceSets.test.runtimeClasspath
  smokeTestCompile sourceSets.main.runtimeClasspath

  // functional
  functionalTestCompile sourceSets.test.runtimeClasspath
  functionalTestCompile sourceSets.main.runtimeClasspath

  testCompile 'junit:junit:4.13'
  testCompile 'org.assertj:assertj-core:3.16.1'
  testCompile 'com.tngtech.java:junit-dataprovider:1.13.1'

  compileOnly 'com.google.code.findbugs:annotations:3.0.1u2'
}

test {

}

mainClassName = 'uk.gov.hmcts.reform.workallocation.Application'

jar {
  enabled = true
}

bootJar {
  archiveName = 'ctsc-work-allocation.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

springBoot {
  mainClassName = 'uk.gov.hmcts.reform.workallocation.Application'
  buildInfo()
}

dependencyCheck {
  failBuildOnCVSS = 0
  suppressionFile = 'dependency-check-suppressions.xml'
}

apply plugin: 'idea'
idea {
  module {
    testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
    testSourceDirs += project.sourceSets.smokeTest.resources.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.resources.srcDirs
  }
}

task smokeTest(type: Test, description: 'Runs the smoke tests', group: 'Verification') {
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}
